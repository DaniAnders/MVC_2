// <auto-generated />
using System;
using MVC_2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_2.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20221021134144_added_people")]
    partial class added_people
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeopleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguagesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LanguagePerson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70538a38-a1e6-4af3-bba6-e628f381e237"),
                            CityName = "Porto",
                            CountryId = new Guid("4f5dc1f0-f5b9-4f90-b799-988cb233b1ae")
                        },
                        new
                        {
                            Id = new Guid("ab542424-4120-4301-a962-a089f7807d05"),
                            CityName = "Braga",
                            CountryId = new Guid("4f5dc1f0-f5b9-4f90-b799-988cb233b1ae")
                        },
                        new
                        {
                            Id = new Guid("04c19d62-fad7-4671-8078-c9cbee3befa3"),
                            CityName = "Guimaraes",
                            CountryId = new Guid("4f5dc1f0-f5b9-4f90-b799-988cb233b1ae")
                        },
                        new
                        {
                            Id = new Guid("c8cf3bcd-89e9-4298-aec8-de0f25f8c169"),
                            CityName = "Bergen",
                            CountryId = new Guid("aa81fa10-b6bd-424d-a5e7-91ad930f489c")
                        },
                        new
                        {
                            Id = new Guid("c48f2aa2-c52a-4841-9e20-b36ea16f4aab"),
                            CityName = "Oslo",
                            CountryId = new Guid("aa81fa10-b6bd-424d-a5e7-91ad930f489c")
                        },
                        new
                        {
                            Id = new Guid("7e18f369-3a77-409a-96b1-df200f459fc0"),
                            CityName = "Trondheim",
                            CountryId = new Guid("aa81fa10-b6bd-424d-a5e7-91ad930f489c")
                        },
                        new
                        {
                            Id = new Guid("216494e4-bf95-4dda-b21e-3014c4746f6b"),
                            CityName = "Copenhagen",
                            CountryId = new Guid("cca16ece-7f88-4143-9880-2273979b9b43")
                        },
                        new
                        {
                            Id = new Guid("d2f954bb-403e-453f-8623-89099d3a3e14"),
                            CityName = "Odense ",
                            CountryId = new Guid("cca16ece-7f88-4143-9880-2273979b9b43")
                        },
                        new
                        {
                            Id = new Guid("c18916b8-06ba-4bc2-b840-7eba08ee04c4"),
                            CityName = "Aarhus",
                            CountryId = new Guid("cca16ece-7f88-4143-9880-2273979b9b43")
                        },
                        new
                        {
                            Id = new Guid("279df6bf-ba3e-4a5b-b1b3-3d6b1ffb7256"),
                            CityName = "Paris",
                            CountryId = new Guid("7245bba1-58c3-4937-883a-7786bf9f9436")
                        },
                        new
                        {
                            Id = new Guid("b1ec0ce6-cf92-4833-b42f-0822236de1d8"),
                            CityName = "Annecy",
                            CountryId = new Guid("7245bba1-58c3-4937-883a-7786bf9f9436")
                        },
                        new
                        {
                            Id = new Guid("a3ef5e79-81f9-429d-83e5-548a9da68d2a"),
                            CityName = "Dijon",
                            CountryId = new Guid("7245bba1-58c3-4937-883a-7786bf9f9436")
                        },
                        new
                        {
                            Id = new Guid("bc2d4d79-8078-49e8-9b1e-5bb7a1db60d1"),
                            CityName = "Florence",
                            CountryId = new Guid("759ddf47-ae2c-4c21-9351-96e1a535ee77")
                        },
                        new
                        {
                            Id = new Guid("6bfd3991-eb10-45ef-b75c-9d845e69f7e8"),
                            CityName = "Rome",
                            CountryId = new Guid("759ddf47-ae2c-4c21-9351-96e1a535ee77")
                        },
                        new
                        {
                            Id = new Guid("035145ec-3d05-4a92-ab28-46dc9e2d42b7"),
                            CityName = "Venice",
                            CountryId = new Guid("759ddf47-ae2c-4c21-9351-96e1a535ee77")
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f5dc1f0-f5b9-4f90-b799-988cb233b1ae"),
                            CountryName = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("aa81fa10-b6bd-424d-a5e7-91ad930f489c"),
                            CountryName = "Norway"
                        },
                        new
                        {
                            Id = new Guid("cca16ece-7f88-4143-9880-2273979b9b43"),
                            CountryName = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("7245bba1-58c3-4937-883a-7786bf9f9436"),
                            CountryName = "France"
                        },
                        new
                        {
                            Id = new Guid("759ddf47-ae2c-4c21-9351-96e1a535ee77"),
                            CountryName = "Italy"
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0eebf3d9-8f63-445f-8bf1-b787bd1a845d"),
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = new Guid("c960d0cc-cee7-4f2e-8b37-214eebf3159b"),
                            LanguageName = "Swedish"
                        },
                        new
                        {
                            Id = new Guid("66da974c-1034-41c3-b171-a3123e8afacf"),
                            LanguageName = "Italian"
                        },
                        new
                        {
                            Id = new Guid("e1dcbc18-faef-4dd5-9a49-aa24a4902c1d"),
                            LanguageName = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("c5077cff-374a-41de-85c9-a518ae0cd831"),
                            LanguageName = "Portuguese"
                        },
                        new
                        {
                            Id = new Guid("09406fcd-8e27-4b22-b56b-3e847425c19c"),
                            LanguageName = "French"
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("155814ba-1fc5-4aa6-af2b-2f815be549df"),
                            CityId = new Guid("70538a38-a1e6-4af3-bba6-e628f381e237"),
                            FirstName = "Antonio",
                            LastName = "Pereira",
                            Phone = "00351786533",
                            SSN = "801009"
                        },
                        new
                        {
                            Id = new Guid("401fae0a-27bd-4dae-8482-fd441aa70dde"),
                            CityId = new Guid("ab542424-4120-4301-a962-a089f7807d05"),
                            FirstName = "Manuel",
                            LastName = "Carvalho",
                            Phone = "00351786533",
                            SSN = "851209"
                        },
                        new
                        {
                            Id = new Guid("ab560690-c8cf-4348-b27f-947612a3fa74"),
                            CityId = new Guid("c8cf3bcd-89e9-4298-aec8-de0f25f8c169"),
                            FirstName = "Petter",
                            LastName = "Bjorge",
                            Phone = "00471786533",
                            SSN = "820413"
                        },
                        new
                        {
                            Id = new Guid("94b89a4e-8265-450c-9bf8-11181df7f7ac"),
                            CityId = new Guid("c48f2aa2-c52a-4841-9e20-b36ea16f4aab"),
                            FirstName = "Maja",
                            LastName = "Nilsen",
                            Phone = "0047786533",
                            SSN = "861211"
                        },
                        new
                        {
                            Id = new Guid("c98b0627-1a25-49bc-b172-a82869faa809"),
                            CityId = new Guid("216494e4-bf95-4dda-b21e-3014c4746f6b"),
                            FirstName = "Elise",
                            LastName = "Jensen",
                            Phone = "00451786533",
                            SSN = "700511"
                        },
                        new
                        {
                            Id = new Guid("91cf5cb2-1112-44c4-bf62-1393e109fd66"),
                            CityId = new Guid("279df6bf-ba3e-4a5b-b1b3-3d6b1ffb7256"),
                            FirstName = "Elisabeth",
                            LastName = "Garnier",
                            Phone = "00331786533",
                            SSN = "750912"
                        });
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("MVC_2.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_2.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.HasOne("MVC_2.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVC_2.Models.Person", b =>
                {
                    b.HasOne("MVC_2.Models.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("MVC_2.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
