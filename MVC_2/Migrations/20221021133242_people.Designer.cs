// <auto-generated />
using System;
using MVC_2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_2.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20221021133242_people")]
    partial class people
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeopleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguagesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LanguagePerson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccb66972-c208-4534-9494-9e9be7a565c7"),
                            CityName = "Porto",
                            CountryId = new Guid("95074062-82ab-4386-ae29-1b0688d6c346")
                        },
                        new
                        {
                            Id = new Guid("673ebbc2-6b9e-4932-ab08-07957647ce7e"),
                            CityName = "Braga",
                            CountryId = new Guid("95074062-82ab-4386-ae29-1b0688d6c346")
                        },
                        new
                        {
                            Id = new Guid("7f3f8027-726c-4315-917b-6f1931168cfa"),
                            CityName = "Guimaraes",
                            CountryId = new Guid("95074062-82ab-4386-ae29-1b0688d6c346")
                        },
                        new
                        {
                            Id = new Guid("11b59f07-bb2c-4b6d-8653-a318f44ba453"),
                            CityName = "Bergen",
                            CountryId = new Guid("2f11db28-3bc2-4fdf-ae9f-3936c13d449d")
                        },
                        new
                        {
                            Id = new Guid("daf7f6b0-8839-4cc3-999e-43464dd59b48"),
                            CityName = "Oslo",
                            CountryId = new Guid("2f11db28-3bc2-4fdf-ae9f-3936c13d449d")
                        },
                        new
                        {
                            Id = new Guid("c4ce767a-710f-4f62-af9b-28d7f856e5ad"),
                            CityName = "Trondheim",
                            CountryId = new Guid("2f11db28-3bc2-4fdf-ae9f-3936c13d449d")
                        },
                        new
                        {
                            Id = new Guid("944d0e71-a2f1-449d-9584-4ba111318379"),
                            CityName = "Copenhagen",
                            CountryId = new Guid("bde65108-e5c4-4188-b4b1-f794ee3c46e6")
                        },
                        new
                        {
                            Id = new Guid("fb9190e7-58ea-4328-aab3-2dbd858b3dcd"),
                            CityName = "Odense ",
                            CountryId = new Guid("bde65108-e5c4-4188-b4b1-f794ee3c46e6")
                        },
                        new
                        {
                            Id = new Guid("fd91f6ed-5c36-43e7-9450-b3d9ceec59bb"),
                            CityName = "Aarhus",
                            CountryId = new Guid("bde65108-e5c4-4188-b4b1-f794ee3c46e6")
                        },
                        new
                        {
                            Id = new Guid("cf32e01b-6015-45bf-acb0-8af93cfda3ec"),
                            CityName = "Paris",
                            CountryId = new Guid("4b044c1b-0368-471a-bf78-ac7a73907878")
                        },
                        new
                        {
                            Id = new Guid("fdf4420f-bc72-40b9-be12-7dca23d3f780"),
                            CityName = "Annecy",
                            CountryId = new Guid("4b044c1b-0368-471a-bf78-ac7a73907878")
                        },
                        new
                        {
                            Id = new Guid("3cfa2b76-ab90-464f-b0b3-7faadc27df1b"),
                            CityName = "Dijon",
                            CountryId = new Guid("4b044c1b-0368-471a-bf78-ac7a73907878")
                        },
                        new
                        {
                            Id = new Guid("99bae452-e123-4b02-8deb-4cfc5d886610"),
                            CityName = "Florence",
                            CountryId = new Guid("566df772-39de-4b14-aff5-e1724b2572db")
                        },
                        new
                        {
                            Id = new Guid("a8048249-862b-42b8-8f2d-a84c6ec13e2a"),
                            CityName = "Rome",
                            CountryId = new Guid("566df772-39de-4b14-aff5-e1724b2572db")
                        },
                        new
                        {
                            Id = new Guid("e6a0ef7b-5251-4615-a392-b3931a51917d"),
                            CityName = "Venice",
                            CountryId = new Guid("566df772-39de-4b14-aff5-e1724b2572db")
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95074062-82ab-4386-ae29-1b0688d6c346"),
                            CountryName = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("2f11db28-3bc2-4fdf-ae9f-3936c13d449d"),
                            CountryName = "Norway"
                        },
                        new
                        {
                            Id = new Guid("bde65108-e5c4-4188-b4b1-f794ee3c46e6"),
                            CountryName = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("4b044c1b-0368-471a-bf78-ac7a73907878"),
                            CountryName = "France"
                        },
                        new
                        {
                            Id = new Guid("566df772-39de-4b14-aff5-e1724b2572db"),
                            CountryName = "Italy"
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5667b130-9844-4d08-bbbf-de4303592ca1"),
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = new Guid("3897cf17-997a-4c4a-a300-6a58efaf5abf"),
                            LanguageName = "Swedish"
                        },
                        new
                        {
                            Id = new Guid("7066d2e4-4896-4396-abfc-3cc7707e2d41"),
                            LanguageName = "Italian"
                        },
                        new
                        {
                            Id = new Guid("c2e8e20a-c417-4cd7-8e45-a4664ee70e16"),
                            LanguageName = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("816b61b9-6009-4d43-83b8-f37133c79c0c"),
                            LanguageName = "Portuguese"
                        },
                        new
                        {
                            Id = new Guid("77a4e8eb-ac80-4324-8574-446fe62e06f5"),
                            LanguageName = "French"
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("MVC_2.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_2.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.HasOne("MVC_2.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVC_2.Models.Person", b =>
                {
                    b.HasOne("MVC_2.Models.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("MVC_2.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
