// <auto-generated />
using System;
using MVC_2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_2.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20221021131215_countries_cities_languages")]
    partial class countries_cities_languages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeopleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguagesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("LanguagePerson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95174af2-f124-4253-b976-f26c5b4f32dd"),
                            CityName = "Porto",
                            CountryId = new Guid("263148f6-5417-4328-b45b-8c391e7cb105")
                        },
                        new
                        {
                            Id = new Guid("b5c6b95e-956e-40ce-88d4-6f3f9e00341c"),
                            CityName = "Braga",
                            CountryId = new Guid("263148f6-5417-4328-b45b-8c391e7cb105")
                        },
                        new
                        {
                            Id = new Guid("0e1f92dd-da6f-4155-b910-3ac8e551ce32"),
                            CityName = "Guimaraes",
                            CountryId = new Guid("263148f6-5417-4328-b45b-8c391e7cb105")
                        },
                        new
                        {
                            Id = new Guid("c481b64e-6c7e-47f5-905e-b37c76ef93b5"),
                            CityName = "Bergen",
                            CountryId = new Guid("60d18e10-566d-425b-b420-d1bef60a1e6e")
                        },
                        new
                        {
                            Id = new Guid("eb30af85-9f6c-4b2f-8edf-18fbfb517f29"),
                            CityName = "Oslo",
                            CountryId = new Guid("60d18e10-566d-425b-b420-d1bef60a1e6e")
                        },
                        new
                        {
                            Id = new Guid("4ad19b6a-a864-4343-bcaa-558b72e0e164"),
                            CityName = "Trondheim",
                            CountryId = new Guid("60d18e10-566d-425b-b420-d1bef60a1e6e")
                        },
                        new
                        {
                            Id = new Guid("1141524b-01b0-4d00-920b-4ce5d9c1c424"),
                            CityName = "Copenhagen",
                            CountryId = new Guid("131ac8a6-49f1-4717-be0a-262d9ca4ac0c")
                        },
                        new
                        {
                            Id = new Guid("562e2dc0-13b8-4626-8a69-89c43f8e3aa7"),
                            CityName = "Odense ",
                            CountryId = new Guid("131ac8a6-49f1-4717-be0a-262d9ca4ac0c")
                        },
                        new
                        {
                            Id = new Guid("2f739800-df32-40ac-a7a4-a1aa348c8377"),
                            CityName = "Aarhus",
                            CountryId = new Guid("131ac8a6-49f1-4717-be0a-262d9ca4ac0c")
                        },
                        new
                        {
                            Id = new Guid("f7ea6182-727f-4833-8c9e-9f3d02aa4ee0"),
                            CityName = "Paris",
                            CountryId = new Guid("38c35795-4019-4e84-8ee9-95b2adda6b3b")
                        },
                        new
                        {
                            Id = new Guid("a18f10e6-fe37-4d7f-b808-31a60635a535"),
                            CityName = "Annecy",
                            CountryId = new Guid("38c35795-4019-4e84-8ee9-95b2adda6b3b")
                        },
                        new
                        {
                            Id = new Guid("a6e0219a-6fd8-467f-b623-bbcda7a1b16c"),
                            CityName = "Dijon",
                            CountryId = new Guid("38c35795-4019-4e84-8ee9-95b2adda6b3b")
                        },
                        new
                        {
                            Id = new Guid("a484d232-3e53-491e-8037-4a2f32154e53"),
                            CityName = "Florence",
                            CountryId = new Guid("505b9769-c390-438e-9079-71de58b38b94")
                        },
                        new
                        {
                            Id = new Guid("1851eac0-b554-40f9-a57d-3fb1dddb72c8"),
                            CityName = "Rome",
                            CountryId = new Guid("505b9769-c390-438e-9079-71de58b38b94")
                        },
                        new
                        {
                            Id = new Guid("42592ce8-c7ef-4f92-b4ae-b55f9448e8d8"),
                            CityName = "Venice",
                            CountryId = new Guid("505b9769-c390-438e-9079-71de58b38b94")
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("263148f6-5417-4328-b45b-8c391e7cb105"),
                            CountryName = "Portugal"
                        },
                        new
                        {
                            Id = new Guid("60d18e10-566d-425b-b420-d1bef60a1e6e"),
                            CountryName = "Norway"
                        },
                        new
                        {
                            Id = new Guid("131ac8a6-49f1-4717-be0a-262d9ca4ac0c"),
                            CountryName = "Denmark"
                        },
                        new
                        {
                            Id = new Guid("38c35795-4019-4e84-8ee9-95b2adda6b3b"),
                            CountryName = "France"
                        },
                        new
                        {
                            Id = new Guid("505b9769-c390-438e-9079-71de58b38b94"),
                            CountryName = "Italy"
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7740c113-82e7-44ef-ae59-74dd919bb486"),
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = new Guid("714e510a-26e0-476c-bc3b-13d28e9f66db"),
                            LanguageName = "Swedish"
                        },
                        new
                        {
                            Id = new Guid("9bf292d4-c217-4320-8822-0af22a2826a3"),
                            LanguageName = "Italian"
                        },
                        new
                        {
                            Id = new Guid("5b8c0ddb-f7fd-4838-aec1-1e3a7227d45e"),
                            LanguageName = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("ea641806-9e02-4823-9c52-fe75da5b94a8"),
                            LanguageName = "Portuguese"
                        },
                        new
                        {
                            Id = new Guid("81f18c56-062c-4e11-92eb-0f744ffb6e46"),
                            LanguageName = "French"
                        });
                });

            modelBuilder.Entity("MVC_2.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("LanguagePerson", b =>
                {
                    b.HasOne("MVC_2.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_2.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVC_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.HasOne("MVC_2.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVC_2.Models.Person", b =>
                {
                    b.HasOne("MVC_2.Models.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MVC_2.Models.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("MVC_2.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
